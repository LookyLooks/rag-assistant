{"docstore/metadata": {"d26a9692-b341-46af-a458-995f510de94d": {"doc_hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211"}, "532c859c-561e-4241-96e4-9d2802500df2": {"doc_hash": "3b22da0be42fa41211f0032de25e43de9563601cb881f72035a25607e6c3a750", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "f41ec491-9966-42d1-9712-e631e2519665": {"doc_hash": "4cc0c6d2775ebf54289e37999745a4b3d5083a542920bc6e28dbc522e751982f", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "5afaf640-66b0-4854-a277-b25d808ce82b": {"doc_hash": "699ba4ed31404000ea09fb1252ad2a3ba198a2dd8cd2272400fb62554bb41707", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "b40cbb88-0946-4b41-a238-2ac1ad36ad90": {"doc_hash": "735b2fe547ee8661cc2815782dd5c397b717709cdbe5f6f5a16ee06d75ee5e9a", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "43355b22-b8a3-4866-ae4a-55eb326d86a7": {"doc_hash": "a0f1cd6f9156aad3d13fbcb609ed293faa052d0d763df7bf9d59ed7e80cf883b", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "5acbd455-cade-431f-8e71-8087e6c6c6f5": {"doc_hash": "4ae682a01f0862ae38c1c5d6e075274ef693804a638e9adc0b95ecc2553f39ec", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "e73ad601-229b-40c7-b251-d29c32983b50": {"doc_hash": "a61473f3d11b0bdddbfab4f5e14d1a8def231a6b3aea256badf6e54505861409", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "c73c9598-ef40-44e2-b0b2-6dfc23822a5d": {"doc_hash": "acd6fe7643b09d5c770a3a8406f7018c95130fed6b7a33573f958346b1fc2440", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "8ed2ebe8-1139-4dbc-9d8b-c49dd3c54786": {"doc_hash": "7a6191ea1073626f325a9d8927ede2f575657508ecb1876d16e38667977407fa", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "b1fa9cca-19c3-4ca8-83ee-25b89d2b6651": {"doc_hash": "fe0d818e36efdeccec87f243c62cf659e1094eca44acaaaa1875c922ac414509", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "02b1f948-25dd-4aa2-a716-0a7d70690008": {"doc_hash": "0316f38ace44c143ed3e692b94c3fccf7517cd3d5d4edd314e3ec3046fa49fd3", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}, "aaae244c-1079-4d81-a6cf-4e7cff08edd9": {"doc_hash": "b60c7db5bc1ee01184b76d7f300beaa507d24d4597adf2da746b65d7085891e6", "ref_doc_id": "d26a9692-b341-46af-a458-995f510de94d"}}, "docstore/data": {"532c859c-561e-4241-96e4-9d2802500df2": {"__data__": {"id_": "532c859c-561e-4241-96e4-9d2802500df2", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f41ec491-9966-42d1-9712-e631e2519665", "node_type": "1", "metadata": {}, "hash": "366550283dee1bee34733534e2b8c510ab8c3a071571141d41e1ce19712abae2", "class_name": "RelatedNodeInfo"}}, "text": "Structured Outputs for Multi-Agent Systems\nDylan Royan Almeida\nAug 6, 2024\nOpen in Github\nIn this cookbook, we will explore how to use Structured Outputs to build multi-agent systems.\nStructured Outputs is a new capability that builds upon JSON mode and function calling to enforce a strict schema in a model output.\nBy using the new parameter strict: true, we are able to guarantee the response abides by a provided schema.\nTo demonstrate the power of this feature, we will use it to build a multi-agent system.\nWhy build a Multi-Agent System?\nWhen using function calling, if the number of functions (or tools) increases, the performance may suffer.\nTo mitigate this, we can logically group the tools together and have specialized \"agents\" that are able to solve specific tasks or sub-tasks, which will increase the overall system performance.\nEnvironment set up\nfrom openai import OpenAI\nfrom IPython.display import Image\nimport json\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom io import StringIO\nimport numpy as np\nclient = OpenAI()\nMODEL = \"gpt-4o-2024-08-06\"\nAgents set up\nThe use case we will tackle is a data analysis task.\nLet's first set up our 4-agents system:\nTriaging agent: Decides which agent(s) to call\nData pre-processing Agent: Prepares data for analysis - for example by cleaning it up\nData Analysis Agent: Performs analysis on the data\nData Visualization Agent: Visualizes the output of the analysis to extract insights\nWe will start by defining the system prompts for each of these agents.\ntriaging_system_prompt = \"\"\"You are a Triaging Agent. Your role is to assess the user's query and route it to the relevant agents. The agents available are:\n- Data Processing Agent: Cleans, transforms, and aggregates data.\n- Analysis Agent: Performs statistical, correlation, and regression analysis.\n- Visualization Agent: Creates bar charts, line charts, and pie charts.\n\nUse the send_query_to_agents tool to forward the user's query to the relevant agents. Also, use the speak_to_user tool to get more information from the user if needed.\"\"\"\n\nprocessing_system_prompt = \"\"\"You are a Data Processing Agent.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2131, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f41ec491-9966-42d1-9712-e631e2519665": {"__data__": {"id_": "f41ec491-9966-42d1-9712-e631e2519665", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "532c859c-561e-4241-96e4-9d2802500df2", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "3b22da0be42fa41211f0032de25e43de9563601cb881f72035a25607e6c3a750", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5afaf640-66b0-4854-a277-b25d808ce82b", "node_type": "1", "metadata": {}, "hash": "2d595351a94d6d00d612b8c56d12b302f3f1e23fc6b81a3f4a171ffe270914ac", "class_name": "RelatedNodeInfo"}}, "text": "processing_system_prompt = \"\"\"You are a Data Processing Agent. Your role is to clean, transform, and aggregate data using the following tools:\n- clean_data\n- transform_data\n- aggregate_data\"\"\"\n\nanalysis_system_prompt = \"\"\"You are an Analysis Agent. Your role is to perform statistical, correlation, and regression analysis using the following tools:\n- stat_analysis\n- correlation_analysis\n- regression_analysis\"\"\"\n\nvisualization_system_prompt = \"\"\"You are a Visualization Agent. Your role is to create bar charts, line charts, and pie charts using the following tools:\n- create_bar_chart\n- create_line_chart\n- create_pie_chart\"\"\"\nWe will then define the tools for each agent.\nApart from the triaging agent, each agent will be equipped with tools specific to their role:\nData pre-processing agent\nClean data\nTransform data\nAggregate data\nData analysis agent\nStatistical analysis\nCorrelation analysis\nRegression Analysis\nData visualization agent\nCreate bar chart\nCreate line chart\nCreate pie chart\ntriage_tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"send_query_to_agents\",\n            \"description\": \"Sends the user query to relevant agents based on their capabilities.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"agents\": {\n                        \"type\": \"array\",\n                        \"items\": {\"type\": \"string\"},\n                        \"description\": \"An array of agent names to send the query to.\"\n                    },\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"The user query to send.\"\n                    }\n                },\n                \"required\": [\"agents\", \"query\"]\n            }\n        },\n        \"strict\": True\n    }\n]\n\npreprocess_tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"clean_data\",\n            \"description\": \"Cleans the provided data by removing duplicates and handling missing values.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The dataset to clean. Should be in a suitable format such as JSON or CSV.\"", "mimetype": "text/plain", "start_char_idx": 2069, "end_char_idx": 4393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5afaf640-66b0-4854-a277-b25d808ce82b": {"__data__": {"id_": "5afaf640-66b0-4854-a277-b25d808ce82b", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f41ec491-9966-42d1-9712-e631e2519665", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "4cc0c6d2775ebf54289e37999745a4b3d5083a542920bc6e28dbc522e751982f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b40cbb88-0946-4b41-a238-2ac1ad36ad90", "node_type": "1", "metadata": {}, "hash": "1006f72ef68399fdbcc9a8429507e81f1525023d6d0119547bbffd38b0028d80", "class_name": "RelatedNodeInfo"}}, "text": "Should be in a suitable format such as JSON or CSV.\"\n                    }\n                },\n                \"required\": [\"data\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"transform_data\",\n            \"description\": \"Transforms data based on specified rules.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The data to transform. Should be in a suitable format such as JSON or CSV.\"\n                    },\n                    \"rules\": {\n                        \"type\": \"string\",\n                        \"description\": \"Transformation rules to apply, specified in a structured format.\"\n                    }\n                },\n                \"required\": [\"data\", \"rules\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"aggregate_data\",\n            \"description\": \"Aggregates data by specified columns and operations.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The data to aggregate. Should be in a suitable format such as JSON or CSV.\"\n                    },\n                    \"group_by\": {\n                        \"type\": \"array\",\n                        \"items\": {\"type\": \"string\"},\n                        \"description\": \"Columns to group by.\"\n                    },\n                    \"operations\": {\n                        \"type\": \"string\",\n                        \"description\": \"Aggregation operations to perform, specified in a structured format.\"\n                    }\n                },\n                \"required\": [\"data\", \"group_by\", \"operations\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n    }\n]\n\n\nanalysis_tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"stat_analysis\",\n            \"description\": \"Performs statistical analysis on the given dataset.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The dataset to analyze. Should be in a suitable format such as JSON or CSV.\"", "mimetype": "text/plain", "start_char_idx": 4341, "end_char_idx": 6982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b40cbb88-0946-4b41-a238-2ac1ad36ad90": {"__data__": {"id_": "b40cbb88-0946-4b41-a238-2ac1ad36ad90", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5afaf640-66b0-4854-a277-b25d808ce82b", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "699ba4ed31404000ea09fb1252ad2a3ba198a2dd8cd2272400fb62554bb41707", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "43355b22-b8a3-4866-ae4a-55eb326d86a7", "node_type": "1", "metadata": {}, "hash": "640a22e239349f3f77232e791153df755678f9a6ca04437808392dfb26e155ff", "class_name": "RelatedNodeInfo"}}, "text": "Should be in a suitable format such as JSON or CSV.\"\n                    }\n                },\n                \"required\": [\"data\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"correlation_analysis\",\n            \"description\": \"Calculates correlation coefficients between variables in the dataset.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The dataset to analyze. Should be in a suitable format such as JSON or CSV.\"\n                    },\n                    \"variables\": {\n                        \"type\": \"array\",\n                        \"items\": {\"type\": \"string\"},\n                        \"description\": \"List of variables to calculate correlations for.\"\n                    }\n                },\n                \"required\": [\"data\", \"variables\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"regression_analysis\",\n            \"description\": \"Performs regression analysis on the dataset.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The dataset to analyze. Should be in a suitable format such as JSON or CSV.\"\n                    },\n                    \"dependent_var\": {\n                        \"type\": \"string\",\n                        \"description\": \"The dependent variable for regression.\"\n                    },\n                    \"independent_vars\": {\n                        \"type\": \"array\",\n                        \"items\": {\"type\": \"string\"},\n                        \"description\": \"List of independent variables.\"\n                    }\n                },\n                \"required\": [\"data\", \"dependent_var\", \"independent_vars\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n    }\n]\n\nvisualization_tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"create_bar_chart\",\n            \"description\": \"Creates a bar chart from the provided data.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The data for the bar chart.", "mimetype": "text/plain", "start_char_idx": 6930, "end_char_idx": 9599, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43355b22-b8a3-4866-ae4a-55eb326d86a7": {"__data__": {"id_": "43355b22-b8a3-4866-ae4a-55eb326d86a7", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b40cbb88-0946-4b41-a238-2ac1ad36ad90", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "735b2fe547ee8661cc2815782dd5c397b717709cdbe5f6f5a16ee06d75ee5e9a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5acbd455-cade-431f-8e71-8087e6c6c6f5", "node_type": "1", "metadata": {}, "hash": "d46f96a33ae553bc1c828a429dee513c1b37a446fa7d92bdc1714c770883f3d5", "class_name": "RelatedNodeInfo"}}, "text": "Should be in a suitable format such as JSON or CSV.\"\n                    },\n                    \"x\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column for the x-axis.\"\n                    },\n                    \"y\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column for the y-axis.\"\n                    }\n                },\n                \"required\": [\"data\", \"x\", \"y\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"create_line_chart\",\n            \"description\": \"Creates a line chart from the provided data.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The data for the line chart. Should be in a suitable format such as JSON or CSV.\"\n                    },\n                    \"x\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column for the x-axis.\"\n                    },\n                    \"y\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column for the y-axis.\"\n                    }\n                },\n                \"required\": [\"data\", \"x\", \"y\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"create_pie_chart\",\n            \"description\": \"Creates a pie chart from the provided data.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"type\": \"string\",\n                        \"description\": \"The data for the pie chart. Should be in a suitable format such as JSON or CSV.\"\n                    },\n                    \"labels\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column for the labels.\"\n                    },\n                    \"values\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column for the values.\"", "mimetype": "text/plain", "start_char_idx": 9600, "end_char_idx": 11895, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5acbd455-cade-431f-8e71-8087e6c6c6f5": {"__data__": {"id_": "5acbd455-cade-431f-8e71-8087e6c6c6f5", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "43355b22-b8a3-4866-ae4a-55eb326d86a7", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "a0f1cd6f9156aad3d13fbcb609ed293faa052d0d763df7bf9d59ed7e80cf883b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e73ad601-229b-40c7-b251-d29c32983b50", "node_type": "1", "metadata": {}, "hash": "c62634dbffac640ac6885c5682faa87f5cbc040cf63b40fbe03814734168b977", "class_name": "RelatedNodeInfo"}}, "text": "}\n                },\n                \"required\": [\"data\", \"labels\", \"values\"],\n                \"additionalProperties\": False\n            }\n        },\n        \"strict\": True\n    }\n]\nTool execution\nWe need to write the code logic to:\nhandle passing the user query to the multi-agent system\nhandle the internal workings of the multi-agent system\nexecute the tool calls\nFor the sake of brevity, we will only define the logic for tools that are relevant to the user query.\n# Example query\n\nuser_query = \"\"\"\nBelow is some data. I want you to first remove the duplicates then analyze the statistics of the data as well as plot a line chart.\n\nhouse_size (m3), house_price ($)\n90, 100\n80, 90\n100, 120\n90, 100\n\"\"\"\nFrom the user query, we can infer that the tools we would need to call are clean_data, start_analysis and use_line_chart.\nWe will first define the execution function which runs tool calls.\nThis maps a tool call to the corresponding function. It then appends the output of the function to the conversation history.\ndef clean_data(data):\n    data_io = StringIO(data)\n    df = pd.read_csv(data_io, sep=\",\")\n    df_deduplicated = df.drop_duplicates()\n    return df_deduplicated\n\ndef stat_analysis(data):\n    data_io = StringIO(data)\n    df = pd.read_csv(data_io, sep=\",\")\n    return df.describe()\n\ndef plot_line_chart(data):\n    data_io = StringIO(data)\n    df = pd.read_csv(data_io, sep=\",\")\n    \n    x = df.iloc[:, 0]\n    y = df.iloc[:, 1]\n    \n    coefficients = np.polyfit(x, y, 1)\n    polynomial = np.poly1d(coefficients)\n    y_fit = polynomial(x)\n    \n    plt.figure(figsize=(10, 6))\n    plt.plot(x, y, 'o', label='Data Points')\n    plt.plot(x, y_fit, '-', label='Best Fit Line')\n    plt.title('Line Chart with Best Fit Line')\n    plt.xlabel(df.columns[0])\n    plt.ylabel(df.columns[1])\n    plt.legend()\n    plt.grid(True)\n    plt.", "mimetype": "text/plain", "start_char_idx": 11916, "end_char_idx": 13753, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e73ad601-229b-40c7-b251-d29c32983b50": {"__data__": {"id_": "e73ad601-229b-40c7-b251-d29c32983b50", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5acbd455-cade-431f-8e71-8087e6c6c6f5", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "4ae682a01f0862ae38c1c5d6e075274ef693804a638e9adc0b95ecc2553f39ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c73c9598-ef40-44e2-b0b2-6dfc23822a5d", "node_type": "1", "metadata": {}, "hash": "d2fa929acc19a0e1f66ee8a631b6f3b607ca7741f4c72a9233f976173b6f8921", "class_name": "RelatedNodeInfo"}}, "text": "columns[1])\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n# Define the function to execute the tools\ndef execute_tool(tool_calls, messages):\n    for tool_call in tool_calls:\n        tool_name = tool_call.function.name\n        tool_arguments = json.loads(tool_call.function.arguments)\n\n        if tool_name == 'clean_data':\n            # Simulate data cleaning\n            cleaned_df = clean_data(tool_arguments['data'])\n            cleaned_data = {\"cleaned_data\": cleaned_df.to_dict()}\n            messages.append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(cleaned_data)})\n            print('Cleaned data: ', cleaned_df)\n        elif tool_name == 'transform_data':\n            # Simulate data transformation\n            transformed_data = {\"transformed_data\": \"sample_transformed_data\"}\n            messages.append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(transformed_data)})\n        elif tool_name == 'aggregate_data':\n            # Simulate data aggregation\n            aggregated_data = {\"aggregated_data\": \"sample_aggregated_data\"}\n            messages.append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(aggregated_data)})\n        elif tool_name == 'stat_analysis':\n            # Simulate statistical analysis\n            stats_df = stat_analysis(tool_arguments['data'])\n            stats = {\"stats\": stats_df.to_dict()}\n            messages.append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(stats)})\n            print('Statistical Analysis: ', stats_df)\n        elif tool_name == 'correlation_analysis':\n            # Simulate correlation analysis\n            correlations = {\"correlations\": \"sample_correlations\"}\n            messages.append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(correlations)})\n        elif tool_name == 'regression_analysis':\n            # Simulate regression analysis\n            regression_results = {\"regression_results\": \"sample_regression_results\"}\n            messages.append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(regression_results)})\n        elif tool_name == 'create_bar_chart':\n            # Simulate bar chart creation\n            bar_chart = {\"bar_chart\": \"sample_bar_chart\"}\n            messages.", "mimetype": "text/plain", "start_char_idx": 13697, "end_char_idx": 15938, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c73c9598-ef40-44e2-b0b2-6dfc23822a5d": {"__data__": {"id_": "c73c9598-ef40-44e2-b0b2-6dfc23822a5d", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e73ad601-229b-40c7-b251-d29c32983b50", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "a61473f3d11b0bdddbfab4f5e14d1a8def231a6b3aea256badf6e54505861409", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8ed2ebe8-1139-4dbc-9d8b-c49dd3c54786", "node_type": "1", "metadata": {}, "hash": "8b2d34f48d177318629d7b4077cc7454d36e83191e921aa56214d564b02dd68b", "class_name": "RelatedNodeInfo"}}, "text": "append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(bar_chart)})\n        elif tool_name == 'create_line_chart':\n            # Simulate line chart creation\n            line_chart = {\"line_chart\": \"sample_line_chart\"}\n            messages.append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(line_chart)})\n            plot_line_chart(tool_arguments['data'])\n        elif tool_name == 'create_pie_chart':\n            # Simulate pie chart creation\n            pie_chart = {\"pie_chart\": \"sample_pie_chart\"}\n            messages.append({\"role\": \"tool\", \"name\": tool_name, \"content\": json.dumps(pie_chart)})\n    return messages\nNext, we will create the tool handlers for each of the sub-agents.\nThese have a unique prompt and tool set passed to the model.\nThe output is then passed to an execution function which runs the tool calls.\nWe will also append the messages to the conversation history.", "mimetype": "text/plain", "start_char_idx": 15938, "end_char_idx": 16851, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ed2ebe8-1139-4dbc-9d8b-c49dd3c54786": {"__data__": {"id_": "8ed2ebe8-1139-4dbc-9d8b-c49dd3c54786", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c73c9598-ef40-44e2-b0b2-6dfc23822a5d", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "acd6fe7643b09d5c770a3a8406f7018c95130fed6b7a33573f958346b1fc2440", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1fa9cca-19c3-4ca8-83ee-25b89d2b6651", "node_type": "1", "metadata": {}, "hash": "07b9d6ab5dcd069f08a0a27d0c0a71212dc53f1989fce0d3c0975827c876eee6", "class_name": "RelatedNodeInfo"}}, "text": "We will also append the messages to the conversation history.\n# Define the functions to handle each agent's processing\ndef handle_data_processing_agent(query, conversation_messages):\n    messages = [{\"role\": \"system\", \"content\": processing_system_prompt}]\n    messages.append({\"role\": \"user\", \"content\": query})\n\n    response = client.chat.completions.create(\n        model=MODEL,\n        messages=messages,\n        temperature=0,\n        tools=preprocess_tools,\n    )\n\n    conversation_messages.append([tool_call.function for tool_call in response.choices[0].message.tool_calls])\n    execute_tool(response.choices[0].message.tool_calls, conversation_messages)\n\ndef handle_analysis_agent(query, conversation_messages):\n    messages = [{\"role\": \"system\", \"content\": analysis_system_prompt}]\n    messages.append({\"role\": \"user\", \"content\": query})\n\n    response = client.chat.completions.create(\n        model=MODEL,\n        messages=messages,\n        temperature=0,\n        tools=analysis_tools,\n    )\n\n    conversation_messages.append([tool_call.function for tool_call in response.choices[0].message.tool_calls])\n    execute_tool(response.choices[0].message.tool_calls, conversation_messages)\n\ndef handle_visualization_agent(query, conversation_messages):\n    messages = [{\"role\": \"system\", \"content\": visualization_system_prompt}]\n    messages.append({\"role\": \"user\", \"content\": query})\n\n    response = client.chat.completions.create(\n        model=MODEL,\n        messages=messages,\n        temperature=0,\n        tools=visualization_tools,\n    )\n\n    conversation_messages.append([tool_call.function for tool_call in response.choices[0].message.tool_calls])\n    execute_tool(response.choices[0].message.tool_calls, conversation_messages)\nFinally, we create the overarching tool to handle processing the user query.\nThis function takes the user query, gets a response from the model and handles passing it to the other agents to execute. In addition to this, we will keep the state of the ongoing conversation.\n# Function to handle user input and triaging\ndef handle_user_message(user_query, conversation_messages=[]):\n    user_message = {\"role\": \"user\", \"content\": user_query}\n    conversation_messages.append(user_message)", "mimetype": "text/plain", "start_char_idx": 16790, "end_char_idx": 19015, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1fa9cca-19c3-4ca8-83ee-25b89d2b6651": {"__data__": {"id_": "b1fa9cca-19c3-4ca8-83ee-25b89d2b6651", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8ed2ebe8-1139-4dbc-9d8b-c49dd3c54786", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "7a6191ea1073626f325a9d8927ede2f575657508ecb1876d16e38667977407fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02b1f948-25dd-4aa2-a716-0a7d70690008", "node_type": "1", "metadata": {}, "hash": "8c8c0fd0fcb40531885112d65c7e0a13635d18bb16d0458f1c644d76646435e9", "class_name": "RelatedNodeInfo"}}, "text": "messages = [{\"role\": \"system\", \"content\": triaging_system_prompt}]\n    messages.extend(conversation_messages)\n\n    response = client.chat.completions.create(\n        model=MODEL,\n        messages=messages,\n        temperature=0,\n        tools=triage_tools,\n    )\n\n    conversation_messages.append([tool_call.function for tool_call in response.choices[0].message.tool_calls])\n\n    for tool_call in response.choices[0].message.tool_calls:\n        if tool_call.function.name == 'send_query_to_agents':\n            agents = json.loads(tool_call.function.arguments)['agents']\n            query = json.loads(tool_call.function.arguments)['query']\n            for agent in agents:\n                if agent == \"Data Processing Agent\":\n                    handle_data_processing_agent(query, conversation_messages)\n                elif agent == \"Analysis Agent\":\n                    handle_analysis_agent(query, conversation_messages)\n                elif agent == \"Visualization Agent\":\n                    handle_visualization_agent(query, conversation_messages)\n\n    return conversation_messages\nMulti-agent system execution\nFinally, we run the overarching handle_user_message function on the user query and view the output.\nhandle_user_message(user_query)\nCleaned data:     house_size (m3)   house_price ($)\n0               90               100\n1               80                90\n2              100               120\nStatistical Analysis:         house_size  house_price\ncount    4.000000     4.000000\nmean    90.000000   102.500000\nstd      8.164966    12.583057\nmin     80.000000    90.000000\n25%     87.500000    97.500000\n50%     90.000000   100.000000\n75%     92.500000   105.000000\nmax    100.000000   120.000000\n[{'role': 'user',\n  'content': '\\nBelow is some data. I want you to first remove the duplicates then analyze the statistics of the data as well as plot a line chart.\\n\\nhouse_size (m3), house_price ($)\\n90, 100\\n80, 90\\n100, 120\\n90, 100\\n'},\n [Function(arguments='{\"agents\": [\"Data Processing Agent\"],", "mimetype": "text/plain", "start_char_idx": 19022, "end_char_idx": 21040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02b1f948-25dd-4aa2-a716-0a7d70690008": {"__data__": {"id_": "02b1f948-25dd-4aa2-a716-0a7d70690008", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1fa9cca-19c3-4ca8-83ee-25b89d2b6651", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "fe0d818e36efdeccec87f243c62cf659e1094eca44acaaaa1875c922ac414509", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aaae244c-1079-4d81-a6cf-4e7cff08edd9", "node_type": "1", "metadata": {}, "hash": "92fbb51b5d09c93545f4126b855d9e62a9ec1b09f5033d499aabac190e012efb", "class_name": "RelatedNodeInfo"}}, "text": "100\\n'},\n [Function(arguments='{\"agents\": [\"Data Processing Agent\"], \"query\": \"Remove duplicates from the data: house_size (m3), house_price ($)\\\\n90, 100\\\\n80, 90\\\\n100, 120\\\\n90, 100\"}', name='send_query_to_agents'),\n  Function(arguments='{\"agents\": [\"Analysis Agent\"], \"query\": \"Analyze the statistics of the data: house_size (m3), house_price ($)\\\\n90, 100\\\\n80, 90\\\\n100, 120\\\\n90, 100\"}', name='send_query_to_agents'),\n  Function(arguments='{\"agents\": [\"Visualization Agent\"], \"query\": \"Plot a line chart for the data: house_size (m3), house_price ($)\\\\n90, 100\\\\n80, 90\\\\n100, 120\\\\n90, 100\"}', name='send_query_to_agents')],\n [Function(arguments='{\"data\":\"house_size (m3), house_price ($)\\\\n90, 100\\\\n80, 90\\\\n100, 120\\\\n90, 100\"}', name='clean_data')],\n {'role': 'tool',\n  'name': 'clean_data',\n  'content': '{\"cleaned_data\": {\"house_size (m3)\": {\"0\": 90, \"1\": 80, \"2\": 100}, \" house_price ($)\": {\"0\": 100, \"1\": 90, \"2\": 120}}}'},\n [Function(arguments='{\"data\":\"house_size,house_price\\\\n90,100\\\\n80,90\\\\n100,120\\\\n90,100\"}', name='stat_analysis')],\n {'role': 'tool',\n  'name': 'stat_analysis',\n  'content': '{\"stats\": {\"house_size\": {\"count\": 4.0, \"mean\": 90.0, \"std\": 8.16496580927726, \"min\": 80.0, \"25%\": 87.5, \"50%\": 90.0, \"75%\": 92.5, \"max\": 100.0}, \"house_price\": {\"count\": 4.0, \"mean\": 102.5,", "mimetype": "text/plain", "start_char_idx": 20972, "end_char_idx": 22279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aaae244c-1079-4d81-a6cf-4e7cff08edd9": {"__data__": {"id_": "aaae244c-1079-4d81-a6cf-4e7cff08edd9", "embedding": null, "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d26a9692-b341-46af-a458-995f510de94d", "node_type": "4", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "29c434fdc733d69187cc15922ee4f93bad8254138aa193b9866795a526aa7211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02b1f948-25dd-4aa2-a716-0a7d70690008", "node_type": "1", "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}, "hash": "0316f38ace44c143ed3e692b94c3fccf7517cd3d5d4edd314e3ec3046fa49fd3", "class_name": "RelatedNodeInfo"}}, "text": "\"house_price\": {\"count\": 4.0, \"mean\": 102.5, \"std\": 12.583057392117917, \"min\": 90.0, \"25%\": 97.5, \"50%\": 100.0, \"75%\": 105.0, \"max\": 120.0}}}'},\n [Function(arguments='{\"data\":\"house_size,house_price\\\\n90,100\\\\n80,90\\\\n100,120\\\\n90,100\",\"x\":\"house_size\",\"y\":\"house_price\"}', name='create_line_chart')],\n {'role': 'tool',\n  'name': 'create_line_chart',\n  'content': '{\"line_chart\": \"sample_line_chart\"}'}]\nConclusion\nIn this cookbook, we've explored how to leverage Structured Outputs to build more robust multi-agent systems.\nUsing this new feature allows to make sure that tool calls follow the specified schema and avoids having to handle edge cases or validate arguments on your side.\nThis can be applied to many more use cases, and we hope you can take inspiration from this to build your own use case!", "mimetype": "text/plain", "start_char_idx": 22235, "end_char_idx": 23040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"d26a9692-b341-46af-a458-995f510de94d": {"node_ids": ["532c859c-561e-4241-96e4-9d2802500df2", "f41ec491-9966-42d1-9712-e631e2519665", "5afaf640-66b0-4854-a277-b25d808ce82b", "b40cbb88-0946-4b41-a238-2ac1ad36ad90", "43355b22-b8a3-4866-ae4a-55eb326d86a7", "5acbd455-cade-431f-8e71-8087e6c6c6f5", "e73ad601-229b-40c7-b251-d29c32983b50", "c73c9598-ef40-44e2-b0b2-6dfc23822a5d", "8ed2ebe8-1139-4dbc-9d8b-c49dd3c54786", "b1fa9cca-19c3-4ca8-83ee-25b89d2b6651", "02b1f948-25dd-4aa2-a716-0a7d70690008", "aaae244c-1079-4d81-a6cf-4e7cff08edd9"], "metadata": {"file_path": "/Users/looky/Documents/LlmSociety/Rag_Assistant/structured_docs/multi_agent.txt", "file_name": "multi_agent.txt", "file_type": "text/plain", "file_size": 23040, "creation_date": "2024-10-05", "last_modified_date": "2024-10-05"}}}}